<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Terminal</title><link>https://ethanefung.github.io/posts/</link><description>Recent content in Posts on Terminal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 18 May 2022 09:04:47 -0700</lastBuildDate><atom:link href="https://ethanefung.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Problem Solving Over Domain Knowledge</title><link>https://ethanefung.github.io/posts/problem-solving/</link><pubDate>Wed, 18 May 2022 09:04:47 -0700</pubDate><guid>https://ethanefung.github.io/posts/problem-solving/</guid><description>An Early Career Lesson&amp;hellip; Years ago when I was interviewing for the first time, I distinctly remember a coding challenge I received that asked me to create an app that allows users to enter a prefix and receive a list of words that contained the entered prefix. I was given a little over two hours to complete the challenge. Eager to impress, I tried to spin up a React app, which at the time was the latest and greatest front-end js framework at the time (this was before create-react-app was a thing), and Redux because that technology was cool and new.</description><content>&lt;h3 id="an-early-career-lesson">An Early Career Lesson&amp;hellip;&lt;/h3>
&lt;p>Years ago when I was interviewing for the first time, I distinctly remember a coding challenge I received that asked me to create an app that allows users to enter a prefix and receive a list of words that contained the entered prefix. I was given a little over two hours to complete the challenge. Eager to impress, I tried to spin up a React app, which at the time was the latest and greatest front-end js framework at the time (this was before create-react-app was a thing), and Redux because that technology was cool and new. I started drawing up a mockup of the UI and thought:&lt;/p>
&lt;p>&amp;ldquo;This is app is going to look so sick!&amp;rdquo;&lt;/p>
&lt;p>Of course, nothing worked. I ran into the issues trying to sync my front-end with the server, and once I had figured out what the problem was, I ended up with a bunch of redux logic sprinkled all over the app (none of which was actually used). In the end all I had to show for was rendering a checkered board with alternating colors.&lt;/p>
&lt;p>Defeated I told one of my developer friends what happened, and what he asked me I&amp;rsquo;ll never forget the dialog we had after that interview.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;Why?&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>&amp;ldquo;Well, they didn&amp;rsquo;t give me enough time to impliment the reduc-&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;No, I mean why did you use Redux?&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Because&amp;hellip;I-&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Why did you even use React? The front end didn&amp;rsquo;t need anything other than an an input field, a submit button and a table of words after the search request.&amp;rdquo;&lt;/p>
&lt;p>When I first started in the industry, I thought the thing that would give me an edge over my competitors was to use the most cutting edge technologies. While there is some truth to this, the conversation I had post interview with my friend taught me that the most important questions an engineer can ever ask is not what technologies are &amp;ldquo;industry standard&amp;rdquo;, or what technologies &amp;ldquo;x big company&amp;rdquo; just released, but what the problem is at hand and what is the simplest way to solve it?&lt;/p>
&lt;p>Can I use React to solve the problem? Probably&amp;hellip;Is it the simplest solution? That depends&amp;hellip;&lt;/p>
&lt;p>In my case, it clearly wasn&amp;rsquo;t because the problem had little to do with the UI of the application, and everything to do with the developing a sensible UX. What makes React an industry standard is that is allows developers to scale large single page applications quickly, and I failed to see that the scope of the problem was small.&lt;/p>
&lt;p>If I could travel back in time to give my younger self advice about working in this industry, I would tell him that no matter what technology he learns, all of it amounts to nothing if his domain knowledge cannot address business concerns. I now work for a startup that depends heavily on engineers to create a product for an older demographic. They don&amp;rsquo;t care if the API is GraphQL or REST. They don&amp;rsquo;t care if the application is built on using blockchain or artificial intelligence. What they do care about is whether or not the application helps them do their jobs well.&lt;/p>
&lt;p>What matters most for engineers is their ability to problem solve. Every framework, library or coding language is an ends to this means. Don&amp;rsquo;t fall into the same mistake I made by trying to impress people with your tech stack. No one is impressed. Instead focus on a business problem, search for a tool you know will work and if none come to mind then learn that new tool everyone has been talking about.&lt;/p></content></item></channel></rss>