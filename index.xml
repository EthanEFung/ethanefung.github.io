<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ethan E. Fung</title><link>https://EthanEFung.github.io/</link><description>Recent content on Ethan E. Fung</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 May 2022 17:34:31 -0700</lastBuildDate><atom:link href="https://EthanEFung.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Simplifying Data Relationships - Exploring Neo4j</title><link>https://EthanEFung.github.io/posts/exploring-neo4j/</link><pubDate>Sun, 29 May 2022 17:34:31 -0700</pubDate><guid>https://EthanEFung.github.io/posts/exploring-neo4j/</guid><description>A few years ago I learned that the nba releases json files daily to the public. Immediately, I jumped on the opportunity to build nba related applications, yet one thing that always stood out to me about their api is the difficulty building relationships between its data collections. Take for example this snippet of json for a collection of players:
[ { &amp;#34;firstName&amp;#34;: &amp;#34;Ben&amp;#34;, &amp;#34;lastName&amp;#34;: &amp;#34;Simmons&amp;#34;, &amp;#34;teams&amp;#34;: [ { &amp;#34;teamId&amp;#34;: &amp;#34;1610612755&amp;#34;, &amp;#34;seasonStart&amp;#34;: &amp;#34;2016&amp;#34;, &amp;#34;seasonEnd&amp;#34;: &amp;#34;2020&amp;#34; }, { &amp;#34;teamId&amp;#34;: &amp;#34;1610612751&amp;#34;, &amp;#34;seasonStart&amp;#34;: &amp;#34;2021&amp;#34;, &amp;#34;seasonEnd&amp;#34;: &amp;#34;2021&amp;#34; } ], &amp;#34;draft&amp;#34;: { &amp;#34;teamId&amp;#34;: &amp;#34;1610612755&amp;#34;, &amp;#34;pickNum&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;roundNum&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;seasonYear&amp;#34;: &amp;#34;2016&amp;#34; }, } ] Here we have we have some basic information about the player such as his first and last name.</description><content>&lt;p>A few years ago I learned that the nba releases json files daily to the public.
Immediately, I jumped on the opportunity to build nba related applications, yet
one thing that always stood out to me about their api is the difficulty
building relationships between its data collections. Take for example this
snippet of json for a collection of players:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;firstName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Ben&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;lastName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Simmons&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;teams&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;teamId&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1610612755&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;seasonStart&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2016&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;seasonEnd&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;teamId&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1610612751&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;seasonStart&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;seasonEnd&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;draft&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;teamId&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1610612755&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;pickNum&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;roundNum&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;seasonYear&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2016&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we have we have some basic information about the player such as his
first and last name. We also have some more complex data that provides
information about his relationship to other entities. For, example this
data shows the teams that Simmons has played for, and for how long (&amp;ldquo;seasonStart&amp;rdquo;
and &amp;ldquo;seasonEnd&amp;rdquo;) but not any more information about each team except for
a team identifier. In the data above we know that Ben Simmons was the number
one pick of the 2016 draft, but the team that he was drafted to cannot
be determined solely by the teamId. This requires us to make another api
request for the NBA Teams:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;nickname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;76ers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;urlName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sixers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;teamId&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1610612755&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;altCityName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Philadelphia&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tricode&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;PHI&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;teamShortName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Philadelphia&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;divName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Atlantic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;isAllStar&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;isNBAFranchise&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;confName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;East&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fullName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Philadelphia 76ers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only once we receive the collection of teams, can we compare the team id of the draft
object against each team object and infer that Ben Simmons was drafted to the
Philadelphia 76ers in 2016.&lt;/p>
&lt;p>The usage of ids or keys to show relationships between entities, is a standard
practice because it can be inpractical to fit all of an api&amp;rsquo;s data into a single
response. Generally REST apis will have several endpoints that clients can use, but the
data the client receives from one requests might be too little (such as the example
here) or too much. However, utilizing ids or keys and requiring that clients make
subsequent requests has the benefit of allowing REST apis to scale data and give the
client the most relevant information while keeping response payloads minimal in size.&lt;/p>
&lt;p>One downside to this approach is the difficultly clients face modeling many-to-many
relationships. For example if I was interested in knowing which players have played on
the same team as Ben Simmons, then the following process would need to occur:&lt;/p>
&lt;ol>
&lt;li>request from the api all players&lt;/li>
&lt;li>iterate over all players creating a hashmap with the teamId as the key and a
collection of players as the value&lt;/li>
&lt;li>iterate and find a player with first name &amp;ldquo;Ben&amp;rdquo; and last name &amp;ldquo;Simmons&amp;rdquo;&lt;/li>
&lt;li>iterate over Ben Simmon&amp;rsquo;s teams&lt;/li>
&lt;li>utilizing the teamId of the Simmon&amp;rsquo;s team iterate over the hash map value for the team&lt;/li>
&lt;li>check to see if the player is not Ben Simmons and iterate over the player&amp;rsquo;s teams&lt;/li>
&lt;li>check to see if the player&amp;rsquo;s teams is the team in question&lt;/li>
&lt;li>if conditions in step 6 and 7 are met, check to see if the season durations of the
player and the season duration of Simmons overlap&lt;/li>
&lt;/ol>
&lt;h1 id="embracing-the-relationships">Embracing the relationships&lt;/h1>
&lt;p>I want to answer questions like the question posed in the section above, but with
the complexity abstracted away. This is where I learned about Cypher: the
querying language that takes a similiar declarative style as SQL but without the
complex joins required in relational databases to request related data.
Using, Cypher I&amp;rsquo;m able to write simple statements about multiple collections, but
first I needed to build out the dataset. To build this set I utilized Neo4j as my graph
database.&lt;/p>
&lt;p>Using Go, I built an api scraper that loads the nba data into a Neo4j instance. First,
I focused on loading the NBA teams into the instance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">TeamsJSON&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">League&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Standard&lt;/span> []&lt;span style="color:#a6e22e">FetchedTeam&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;standard&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#e6db74">`json:&amp;#34;league&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FetchedTeam&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">FullName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;fullName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">City&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;city&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">TeamShortName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;teamShortName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsNBAFranchise&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;isNBAFranchise&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ConferenceName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;confName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Tricode&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;tricode&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DivisionName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;divName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsAllStar&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;isAllStar&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Nickname&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;nickname&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">URLName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;urlName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">TeamID&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;teamId&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">fetchTeams&lt;/span>() ([]&lt;span style="color:#a6e22e">FetchedTeam&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">teams&lt;/span> &lt;span style="color:#a6e22e">TeamsJSON&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fetchAndUnmarshal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;nba-url.here.com&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">teams&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">teams&lt;/span>.&lt;span style="color:#a6e22e">League&lt;/span>.&lt;span style="color:#a6e22e">Standard&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then I needed to take this collection and create Graph &amp;ldquo;Nodes&amp;rdquo;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">teams&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fetchTeams&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">createTeams&lt;/span>(&lt;span style="color:#a6e22e">teams&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Heres what the create function looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createTeams&lt;/span>(&lt;span style="color:#a6e22e">ft&lt;/span> []&lt;span style="color:#a6e22e">FetchedTeam&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">driver&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createDriver&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">closeDriver&lt;/span>(&lt;span style="color:#a6e22e">driver&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">session&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createSession&lt;/span>(&lt;span style="color:#a6e22e">driver&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">created&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">WriteTransaction&lt;/span>(&lt;span style="color:#a6e22e">createTeamsTXWork&lt;/span>(&lt;span style="color:#a6e22e">ft&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;created:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">created&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the code snippet above, the Go function creates a neo4j driver,
and begins a session where a transaction is made with the database.
Within transaction, I can write some Cypher the driver will execute.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">createTeamsQuery&lt;/span> = &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">MERGE (team:Team { fullName: $fullName, shortName: $shortName, city: $city, tricode: $tricode })
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createTeamsTXWork&lt;/span>(&lt;span style="color:#a6e22e">ft&lt;/span> []&lt;span style="color:#a6e22e">FetchedTeam&lt;/span>) &lt;span style="color:#a6e22e">neo4j&lt;/span>.&lt;span style="color:#a6e22e">TransactionWork&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">tx&lt;/span> &lt;span style="color:#a6e22e">neo4j&lt;/span>.&lt;span style="color:#a6e22e">Transaction&lt;/span>) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">team&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">ft&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">params&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fullName&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">team&lt;/span>.&lt;span style="color:#a6e22e">FullName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;shortName&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">team&lt;/span>.&lt;span style="color:#a6e22e">TeamShortName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;city&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">team&lt;/span>.&lt;span style="color:#a6e22e">City&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tricode&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">team&lt;/span>.&lt;span style="color:#a6e22e">Tricode&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tx&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">createTeamsQuery&lt;/span>, &lt;span style="color:#a6e22e">params&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Record&lt;/span>().&lt;span style="color:#a6e22e">Values&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I create nodes with a label of &lt;code>Team&lt;/code> with the defining chacteristics
of having a full name, a short name, city, and tricode for each team that is received
from the &amp;ldquo;fetchTeams&amp;rdquo; function.&lt;/p>
&lt;p>A similar process was done to load the NBA players of the 2021 season. Namely, all
of the players were fetched from the NBA api, a driver and neo4j session was created
and a transaction took place where we created nodes in our graph database of each player.&lt;/p>
&lt;p>Using Neo4j&amp;rsquo;s database browser, this is what the player data looks like&lt;/p>
&lt;p>&lt;img src="./neo4j-25-players.png" alt="25 Neo4j player nodes">&lt;/p>
&lt;p>At this point the data doesn&amp;rsquo;t look interesting because we only have two kinds of
nodes in our graph database. So, at this point I used the neo4j driver in a similar
process to relate the players to their respective teams. Here is the Cypher query
that was executed per player per team.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">relatePlaysForQuery&lt;/span> = &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">MATCH (p:Player { firstName: $firstName, lastName: $lastName })
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">MATCH (t:Team { city: $city, fullName: $fullName })
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">MERGE (p)-[pf:PLAYS_FOR { seasonStart: $seasonStart }]-&amp;gt;(t)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">SET pf.seasonEnd = $seasonEnd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">RETURN p, t
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What impresses me the most about Cypher how succint the statement is to describe the
relationship between team and player. We describe a one way relationship between
the two nodes, and give it a title &lt;code>PLAYS_FOR&lt;/code> and we can even pass key-value pairs
to describe the attributes of the relationship like the years that the player had
started and ended their seasons with a team. But what do these relationships
look like visually?&lt;/p>
&lt;p>&lt;img src="./neo4j-2620-nodes.png" alt="Too Many Nodes">&lt;/p>
&lt;p>This amount of data with can be overwhelming. However, Neo4j and Cypher not only have
powerful ways of creating many-to-many relationships, but also quickly querying for
specific data. Coming back to the example of finding all of Ben Simmon&amp;rsquo;s potential teammates.&lt;/p>
&lt;p>&lt;img src="./neo4j-simmons-teammates.png" alt="Graph of Ben Simmons Teammates">&lt;/p>
&lt;p>Looking at the data, we gain some interesting insights as well, like all the players who
have played on both teams that Ben Simmons has played for. We can tell that the
dataset is incomplete. Because only the years of season start and end are captured, we
can&amp;rsquo;t distinguish the players who were Ben Simmons teammates from the players that were
involved in a trade for Ben Simmons (James Harden). That will have to be refined&amp;hellip;&lt;/p>
&lt;p>Hopefully, I&amp;rsquo;ve conveyed my excitement for this technology, and will be writing more
about it in future posts!&lt;/p></content></item><item><title>Why Your React List of Items is Not Changing</title><link>https://EthanEFung.github.io/posts/react-keys-in-list/</link><pubDate>Wed, 25 May 2022 08:04:02 -0700</pubDate><guid>https://EthanEFung.github.io/posts/react-keys-in-list/</guid><description>Over the years React has matured well in making sure the development process is predictible, especially for newer programmers, but every once in a while React developers come across a process in the framework that requires a deeper level understanding. Keys in react lists are one of those processes.
function ExampleComponent() { const [list, setList] = React.useState([ { name: &amp;#39;a&amp;#39; }, { name: &amp;#39;b&amp;#39; }, { name: &amp;#39;c&amp;#39; }, ]) return ( &amp;lt;ul&amp;gt; {list.</description><content>&lt;p>Over the years React has matured well in making sure the development process is predictible, especially for newer programmers, but every once in a while React developers come across a process in the framework that requires a deeper level understanding. Keys in react lists are one of those processes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useState&lt;/span>([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>((&lt;span style="color:#a6e22e">item&lt;/span>) =&amp;gt; &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you were to write the component above into your React application, React would give you a warning. In React 18, the warning can be found in the browser console.&lt;/p>
&lt;p>&lt;code>Warning: Each child in a list should have a unique &amp;quot;key&amp;quot; prop. ...&lt;/code>&lt;/p>
&lt;p>The React documentation on this topic is fairly robust. So, I&amp;rsquo;d recommend a thorough read through it, but let&amp;rsquo;s say we&amp;rsquo;re really trying to get our application out to production, and we want to get rid of the error so we make a small modification.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useState&lt;/span>([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>((&lt;span style="color:#a6e22e">item&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>) =&amp;gt; &amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">i&lt;/span>}&amp;gt;{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, we&amp;rsquo;ve passed the index of the item in the array as the key of the &lt;code>&amp;lt;li&amp;gt;&lt;/code> nodes, and this makes the warning go away. In many scenarios this could be fine, but lets talk about a scenario in which this pattern could lead to problems.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useState&lt;/span>([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;frank&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;owen&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gehry&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;purple&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">ctrlProps&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">prev&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>((&lt;span style="color:#a6e22e">item&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>) =&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">i&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{ &lt;span style="color:#a6e22e">display&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;list-item&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">defaultValue&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{() =&amp;gt; &lt;span style="color:#a6e22e">swapColors&lt;/span>(&lt;span style="color:#a6e22e">ctrlProps&lt;/span>)}&amp;gt;&lt;span style="color:#a6e22e">swap&lt;/span> &lt;span style="color:#a6e22e">color&lt;/span>&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{() =&amp;gt; &lt;span style="color:#a6e22e">swapItems&lt;/span>(&lt;span style="color:#a6e22e">ctrlProps&lt;/span>)}&amp;gt;&lt;span style="color:#a6e22e">swap&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span>&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">swapColors&lt;/span>({ &lt;span style="color:#a6e22e">prev&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> }) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [...&lt;span style="color:#a6e22e">prev&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">temp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">color&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>].&lt;span style="color:#a6e22e">color&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>].&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">temp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setList&lt;/span>(&lt;span style="color:#a6e22e">list&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">swapItems&lt;/span>({ &lt;span style="color:#a6e22e">prev&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> }) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [...&lt;span style="color:#a6e22e">prev&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">temp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">temp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setList&lt;/span>(&lt;span style="color:#a6e22e">list&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this new example we have two state controllers &lt;code>swapItems&lt;/code> and &lt;code>swapColors&lt;/code> which take a state array and setter. These controllers are invoked on button clicks. Also to point out that unlike our previous example we are now rendering &lt;code>&amp;lt;input /&amp;gt;&lt;/code> nodes which have internal state not maintained by React&amp;rsquo;s virtual DOM.&lt;/p>
&lt;p>Looking at the state controllers, we can assume that intended effect in &lt;code>swapItems&lt;/code> is that the ordering of the items should change while &lt;code>swapColors&lt;/code> should just update the attributes of the items. The implication of &lt;code>swapItems&lt;/code> is that the internal states of item 0 and 2 should change, while the internal states when using &lt;code>swapColors&lt;/code> should not.&lt;/p>
&lt;p>Namely, if you were to run the code in a code sandbox like this:&lt;/p>
&lt;p>&lt;a href="https://codesandbox.io/s/elegant-ptolemy-xj5ysd?file=/src/ExampleComponent.js">Example CodeSandbox&lt;/a>&lt;/p>
&lt;p>You&amp;rsquo;d expect that the upon clicking the &lt;code>swapItems&lt;/code> button that the input values &amp;ldquo;frank&amp;rdquo; and &amp;ldquo;gehry&amp;rdquo; should switch, but this is not the case when we use the index as the key. Why is that?&lt;/p>
&lt;p>The reason why the &lt;code>key&lt;/code> attribute exists on React elements is because it helps React determine whether the elements should be re-ordered or if only the properties of the elements should change. By passing the index of the element we are effectively telling React, &amp;ldquo;All of these elements in this list will &lt;em>not&lt;/em> be re-ordered in any way.&amp;rdquo; Therefore, React does not change any of the internal state of the ordered items.&lt;/p>
&lt;pre tabindex="0">&lt;code>first render
...
item with key -&amp;gt; 0
- color: red
- name: frank
- input1
- defaultValue: frank
- value: frank
itemB with key -&amp;gt; 2
- color: purple
- name: gehry
- input2
- defaultValue: gehry
- value: gehry
action:
Run the swap items controller
second render
...
item with key -&amp;gt; 0
- color: purple
- name: gehry
- input1
- defaultValue: gehry &amp;lt;--- a new default value is passed but
- value: frank &amp;lt;--- input manages its own state
item with key -&amp;gt; 2
- color: red
- name: frank
- input2
- defaultValue: frank &amp;lt;--- a new default value is passed but
- value: gehry &amp;lt;--- input manages its own state
&lt;/code>&lt;/pre>&lt;p>I should note that this behavior isn&amp;rsquo;t unique to html elements, but any stateful React elements where the state is managed below the list. The solution, (as it is well document) is to use to pass unique identifiers as the keys&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useState&lt;/span>([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;frank&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;owen&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gehry&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;purple&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">ctrlProps&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">prev&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">setList&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>((&lt;span style="color:#a6e22e">item&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>) =&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#a6e22e">using&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#a6e22e">could&lt;/span> &lt;span style="color:#a6e22e">be&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#a6e22e">weak&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#a6e22e">if&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#a6e22e">can&lt;/span> &lt;span style="color:#a6e22e">be&lt;/span> &lt;span style="color:#a6e22e">mutated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#a6e22e">or&lt;/span> &lt;span style="color:#a6e22e">reordered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{ &lt;span style="color:#a6e22e">display&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;list-item&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">defaultValue&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{() =&amp;gt; &lt;span style="color:#a6e22e">swapColors&lt;/span>(&lt;span style="color:#a6e22e">ctrlProps&lt;/span>)}&amp;gt;&lt;span style="color:#a6e22e">swap&lt;/span> &lt;span style="color:#a6e22e">color&lt;/span>&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{() =&amp;gt; &lt;span style="color:#a6e22e">swapItems&lt;/span>(&lt;span style="color:#a6e22e">ctrlProps&lt;/span>)}&amp;gt;&lt;span style="color:#a6e22e">swap&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span>&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An even better solution would be to import an npm library like &lt;code>nanoid&lt;/code> and adding an id attribute to each of the items in the list, but use the most appropriate solution for your application.&lt;/p>
&lt;p>In conclusion, it&amp;rsquo;s always safe pass a unique identifier and avoid using the index as the key to the list. However, you can use the index in the use cases where:&lt;/p>
&lt;ol>
&lt;li>The ordering of the list is guaranteed to stay the same through the lists lifetime (this includes no deletion of elements).&lt;/li>
&lt;li>None of the items in the list contain internal state.&lt;/li>
&lt;/ol>
&lt;p>Though, my recommendation is to never set the index as the key since you never know whether business requirements for your component will call for the reordering of the list, or if your list items become stateful.&lt;/p>
&lt;h2 id="more-reading">More Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://reactjs.org/docs/lists-and-keys.html">Lists and Keys&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/dan_abramov/status/1415279090446204929?lang=en">Dan Abramov&amp;rsquo;s Tweet&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Problem Solving Over Domain Knowledge</title><link>https://EthanEFung.github.io/posts/problem-solving/</link><pubDate>Wed, 18 May 2022 09:04:47 -0700</pubDate><guid>https://EthanEFung.github.io/posts/problem-solving/</guid><description>An Early Career Lesson&amp;hellip; Years ago when I was interviewing for the first time, I distinctly remember a coding challenge I received that asked me to create an app that allows users to enter a prefix and receive a list of words that contained the entered prefix. I was given a little over two hours to complete the challenge. Eager to impress, I tried to spin up a React app, which at the time was the latest and greatest front-end js framework at the time (this was before create-react-app was a thing), and Redux because that technology was cool and new.</description><content>&lt;h3 id="an-early-career-lesson">An Early Career Lesson&amp;hellip;&lt;/h3>
&lt;p>Years ago when I was interviewing for the first time, I distinctly remember a coding challenge I received that asked me to create an app that allows users to enter a prefix and receive a list of words that contained the entered prefix. I was given a little over two hours to complete the challenge. Eager to impress, I tried to spin up a React app, which at the time was the latest and greatest front-end js framework at the time (this was before create-react-app was a thing), and Redux because that technology was cool and new. I started drawing up a mockup of the UI and thought:&lt;/p>
&lt;p>&amp;ldquo;This is app is going to look so sick!&amp;rdquo;&lt;/p>
&lt;p>Of course, nothing worked. I ran into the issues trying to sync my front-end with the server, and once I had figured out what the problem was, I ended up with a bunch of redux logic sprinkled all over the app (none of which was actually used). In the end all I had to show for was rendering a checkered board with alternating colors.&lt;/p>
&lt;p>Defeated I told one of my developer friends what happened, and what he asked me I&amp;rsquo;ll never forget the dialog we had after that interview.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;Why?&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>&amp;ldquo;Well, they didn&amp;rsquo;t give me enough time to impliment the reduc-&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;No, I mean why did you use Redux?&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Because&amp;hellip;I-&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Why did you even use React? The front end didn&amp;rsquo;t need anything other than an an input field, a submit button and a table of words after the search request.&amp;rdquo;&lt;/p>
&lt;p>When I first started in the industry, I thought the thing that would give me an edge over my competitors was to use the most cutting edge technologies. While there is some truth to this, the conversation I had post interview with my friend taught me that the most important questions an engineer can ever ask is not what technologies are &amp;ldquo;industry standard&amp;rdquo;, or what technologies &amp;ldquo;x big company&amp;rdquo; just released, but what the problem is at hand and what is the simplest way to solve it?&lt;/p>
&lt;p>Can I use React to solve the problem? Probably&amp;hellip;Is it the simplest solution? That depends&amp;hellip;&lt;/p>
&lt;p>In my case, it clearly wasn&amp;rsquo;t because the problem had little to do with the UI of the application, and everything to do with the developing a sensible UX. What makes React an industry standard is that is allows developers to scale large single page applications quickly, and I failed to see that the scope of the problem was small.&lt;/p>
&lt;p>If I could travel back in time to give my younger self advice about working in this industry, I would tell him that no matter what technology he learns, all of it amounts to nothing if his domain knowledge cannot address business concerns. I now work for a startup that depends heavily on engineers to create a product for an older demographic. They don&amp;rsquo;t care if the API is GraphQL or REST. They don&amp;rsquo;t care if the application is built on using blockchain or artificial intelligence. What they do care about is whether or not the application helps them do their jobs well.&lt;/p>
&lt;p>What matters most for engineers is their ability to problem solve. Every framework, library or coding language is an ends to this means. Don&amp;rsquo;t fall into the same mistake I made by trying to impress people with your tech stack. No one is impressed. Instead focus on a business problem, search for a tool you know will work and if none come to mind then learn that new tool everyone has been talking about.&lt;/p></content></item><item><title>Hello!</title><link>https://EthanEFung.github.io/about/</link><pubDate>Wed, 18 May 2022 08:54:45 -0700</pubDate><guid>https://EthanEFung.github.io/about/</guid><description>To start off, welcome to my site! I&amp;rsquo;m Ethan, an engineer who 6 years ago took a professional interest in computers and tech. I used to work as a Medical Assistant at a small clinic in Los Angeles. There, I began to get a name for myself as the &amp;lsquo;go-to&amp;rsquo; staff member for software and hardware problems. But to be truthful, the bulk of my consultations were spent teaching my colleagues how to navigate interfaces.</description><content>&lt;p>To start off, welcome to my site! I&amp;rsquo;m Ethan, an engineer who 6 years ago took a professional interest in computers and tech. I used to work as a Medical Assistant at a small clinic in Los Angeles. There, I began to get a name for myself as the &amp;lsquo;go-to&amp;rsquo; staff member for software and hardware problems. But to be truthful, the bulk of my consultations were spent teaching my colleagues how to navigate interfaces.&lt;/p>
&lt;p>At first, I scheduled a few hours out of my work day to teach my colleagues how to use the menus and forms they were expected to know. But it was obvious from the beginning that the majority of our frustrations at the clinic revolved around unintuitive software, and this prevented the team from giving patients our full attention.&lt;/p>
&lt;p>So, I started to take interest in software because I wanted to build a product that my colleagues would use. I started to learn HTML, CSS, and JavaScript quickly learning to build web applications. While I miss the medical field from time to time, I&amp;rsquo;ve found work that I love.&lt;/p></content></item></channel></rss>